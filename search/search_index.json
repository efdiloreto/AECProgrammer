{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"about/","title":"Welcome to my AEC Programming Blog!","text":"<p>Hello there! Welcome to my blog, where I aim to bridge the gap between the world of architecture, engineering, and programming. </p> <p>My name is Eduardo Di Loreto, and I'm an experienced civil engineer with a passion for programming in Python and C#. Over the past 8 years, I have immersed myself in the exciting realm of software development, focusing on creating powerful plugins and scripts for various industry-leading BIM (Building Information Modeling) and AEC (Architecture, Engineering, and Construction) software such as Revit, Rhino, Tekla (I'm the PyTekla creator), IFC and other structural engineering tools.</p>"},{"location":"about/#why-i-started-this-blog","title":"Why I Started This Blog","text":"<p>As an engineer, I understand the importance of efficiency, accuracy, and automation in the design and construction processes. Programming has become an invaluable skill for architects and engineers, and I believe that sharing my knowledge and experiences in Python and C# can empower fellow professionals to embrace coding as a means to optimize their workflows and unleash their creative potential.</p>"},{"location":"about/#what-youll-find-here","title":"What You'll Find Here","text":"<p>In this blog, you'll find examples on how to code for different softwares using different and real world examples.</p>"},{"location":"about/#join-me-on-this-exciting-journey","title":"Join Me on This Exciting Journey","text":"<p>If you have any questions, suggestions, or topics you'd like me to cover, don't hesitate to reach out. I look forward to connecting with you and empowering you with the tools to take your architectural and engineering projects to new heights!</p> <p>You can find me here:</p> <ul> <li>LinkedIn</li> <li>Email</li> </ul>"},{"location":"about/#support-me","title":"Support me","text":"<p>I'm trying to keep this blog free of Ads. If you like what I do consider supporting me here:</p> <p></p> <p>Happy coding! \u263a\ufe0f</p>"},{"location":"coming_soon_ifc/","title":"Coming Soon!","text":""},{"location":"coming_soon_rhino/","title":"Coming Soon!","text":""},{"location":"coming_soon_tekla/","title":"Coming Soon!","text":""},{"location":"revit/parameters/","title":"Read and Write Parameters","text":"<p>Before starting, make sure you have installed Revit Python Shell. Please note that Revit Python Shell already has imported all the necessary classes and objects from the Revit API, so you can run directly in your RPS Editor all the code used in this story.</p>"},{"location":"revit/parameters/#api-reference","title":"API Reference","text":"<ul> <li>Element</li> <li>Parameter</li> <li>Definition</li> <li>Transaction</li> </ul>"},{"location":"revit/parameters/#getting-parameters-from-revit-elements","title":"Getting parameters from Revit elements","text":"<p>Almost any Revit object inherits from Element, because of that we have access to it\u2019s method and properties. For convenience, in these examples we are going to use the active view in the document as element to read and write the parameters. However, you can get from the document any other element. Please, refer to this post to know how to do it.</p>"},{"location":"revit/parameters/#all-parameters-from-element","title":"All parameters from element","text":"<p>We can get all the parameters using the element property \u201cParameters\u201d.</p> <pre><code>element = doc.ActiveView\nfor parameter in element.Parameters:\n# The property \"Definition\" of the parameter give us the Name\nparameter_name = parameter.Definition.Name\nprint(parameter_name)\n</code></pre>"},{"location":"revit/parameters/#getting-parameter-by-name","title":"Getting parameter by Name","text":"<p>Using the \u201cLookupParameter\u201d method. This return may be \u201cNone\u201d if there is no matching parameter. If there are multiple matching parameters the first one found is returned.</p> <pre><code>element = doc.ActiveView\nparameter_to_find = \"Drawn By\"\nparameter = element.LookupParameter(parameter_to_find)\n# we ALWAYS need to check if the parameter exists\nif parameter is not None:\nprint(f'\"{parameter_to_find}\" parameter was found')\nelse:\nprint(f'\"{parameter_to_find}\" parameter was not found')\n</code></pre> <p>Using the \u201cGetParameters\u201d method.This will return a list will al the parameters matching that name. If not find any parameters, the list will be empty.</p> <pre><code>element = doc.ActiveView\nparameter_to_find = \"Drawn By\"\nparameters = element.GetParameters(parameter_to_find)\nfor parameter in parameters:\nprint(parameter.Definition.Name)\n</code></pre> <p>Using the \u201cParametersMap\u201d property.</p> <pre><code>import Autodesk.Revit.Exceptions as rex\nelement = doc.ActiveView\nparameter_to_find = \"Drawn By\"\ntry:\nparameter = element.ParametersMap[parameter_to_find]\nprint(parameter.Definition.Name)\nexcept rex.InvalidOperationException:\nprint(f'Could not find parameter \"{parameter_to_find}\"')\n</code></pre>"},{"location":"revit/parameters/#getting-the-value-from-a-parameter","title":"Getting the value from a parameter","text":"<p>In this example we are going to use a simple window to get the parameters. Let\u2019s grab the \u201cWidth\u201d parameter and get some information.</p> <p></p> <pre><code>window_id = uidoc.Selection.GetElementIds()[0] # Getting the first id of the list\nwindow = doc.GetElement(window_id)\nwidth_parameter = window.LookupParameter(\"Width\")\nprint(width_parameter.StorageType) # This will print \"Double\" which is a number\n# Checking the units\nunit_type_id = width_parameter.GetUnitTypeId()\nprint(unit_type_id.TypeId) # This will print \"autodesk.unit.unit:millimeters-1.0.1\"\n# Getting the value as a string with the correct units\nvalue_string = width_parameter.AsValueString()\nprint(value_string) # This will print 1500\n# To have the actual number we need to convert it to a number in python\nnumeric_value = float(value_string)\n# Getting the numeric value contained in the parameter\ninternal_numeric_value = width_parameter.AsDouble()\nprint(internal_numeric_value) # This will print \"4.92125\" because Revit internal units are imperial.\n</code></pre> <p>To know more about the storage types, check this link.</p> <p>When you get a numeric value take in mind that Revit is giving that value in internal units. Revit has some utilities to deal with this kind of situation. We can convert that value in the following way, continuing with the previous example:</p> <pre><code>desired_value = UnitUtils.ConvertFromInternalUnits(internal_numeric_value, unit_type_id)\nprint(desired_value) # This will print \"1500.0\"\n</code></pre>"},{"location":"revit/parameters/#setting-a-parameter-value","title":"Setting a Parameter value","text":"<p>To change a parameter in Revit, we need to start a transaction. Actually, we need to start a transaction to make any change in the Revit database.</p> <pre><code>window_id = uidoc.Selection.GetElementIds()[0] # Getting the first id of the list\nwindow = doc.GetElement(window_id)\nwidth_parameter = window.LookupParameter(\"Width\")\nnew_value = 2000\nnew_internal_value = UnitUtils.ConvertToInternalUnits(new_value, unit_type_id)\ntransaction = Transaction(doc)\n# Starting transaction\ntransaction.Start(\"Change window width\")\ntry:\nwidth_parameter.Set(new_internal_value)\ntransaction.Commit()\nexcept:  # Don't do this, specify the type of the exception. I'm doing this for convenience.\n# We need to ensure we finish the transaction\ntransaction.RollBack()\n</code></pre>"},{"location":"revit/parameters/#real-world-example","title":"Real world example","text":"<p>In many real-world projects, we often encounter the need to make changes, which can sometimes be time-consuming. For instance, in this particular scenario, we will demonstrate how to add a prefix to the parameter \u201cSheet Number\u201d in all sheets within the model where the Sheet Name contains a specific word (in this case: \u201carch\u201d).</p> <pre><code>prefix = \"PR\"\nword = \"arch\"\n# Getting all sheets\nsheets = FilteredElementCollector(doc).OfClass(ViewSheet).WhereElementIsNotElementType()\ntransaction = Transaction(doc)\n# Starting transaction\ntransaction.Start(\"Add prefix to sheet number\")\ntry:\nfor sheet in sheets:\n# Getting sheet name\nsheet_name_parameter = sheet.LookupParameter(\"Sheet Name\")\nsheet_name = sheet_name_parameter.AsString() # The sheet name is a string (a word in non programming terms)\n# Checking if the sheet name contains the word \"arch\"\n# I'm using the method \"lower\" in python to compare lowercase with lowercase because we are doing case-insensitive string comparison\nif word in sheet_name.lower():\nsheet_number_parameter = sheet.LookupParameter(\"Sheet Number\")\nsheet_number = sheet_number_parameter.AsString()\nnew_sheet_number = f\"{prefix}-{sheet_number}\"\nsheet_number_parameter.Set(new_sheet_number)\ntransaction.Commit()\nexcept:  # Don't do this, specify the type of the exception. I'm doing this for convenience.\n# We need to ensure we finish the transaction\ntransaction.RollBack()\n</code></pre>"},{"location":"revit/select_elements/","title":"Select elements from\u00a0Model","text":"<p>There are several ways to get elements from the model using the Revit API. Here we are going to explore some of them. Before starting, make sure you have installed Revit Python Shell. Please note that Revit Python Shell already has imported all the necessary classes and objects from the Revit API, so you can run directly in your RPS Editor all the code used in this story.</p>"},{"location":"revit/select_elements/#api-reference","title":"API Reference","text":"<ul> <li>FilteredElementCollector</li> <li>Document</li> <li>BuiltInCategory</li> <li>ViewSheet</li> <li>UIDocument</li> <li>Selection</li> <li>ISelectionFilter</li> </ul>"},{"location":"revit/select_elements/#using-filteredelementcollector","title":"Using FilteredElementCollector","text":""},{"location":"revit/select_elements/#all-elements-in-the-model","title":"All elements in the\u00a0model","text":"<pre><code># The variable doc is already instantiated in Revit Python Shell\nelements = FilteredElementCollector(doc).WhereElementIsNotElementType()\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#all-elements-in-the-active-view","title":"All elements in the active\u00a0view","text":"<p>Here we are using the active view, but you can pass the Id of any view to the FilteredElementCollector constructor.</p> <pre><code># The variable doc is already instantiated in Revit Python Shell\nactive_view = doc.ActiveView\nelements = FilteredElementCollector(doc, active_view.Id).WhereElementIsNotElementType()\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#all-elements-owned-by-a-view","title":"All elements owned by a\u00a0view","text":"<p>For example, an annotation element.</p> <pre><code># The variable doc is already instantiated in Revit Python Shell\nactive_view = doc.ActiveView\nelements = FilteredElementCollector(doc).OwnedByView(active_view.Id).WhereElementIsNotElementType()\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#all-elements-of-a-specific-category","title":"All elements of a specific\u00a0category","text":"<p>In this example, we are getting all the elements from the model that have the category \"Floors\".</p> <pre><code># The variable doc is already instantiated in Revit Python Shell\nelements = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType()\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#all-elements-of-a-specific-class","title":"All elements of a specific\u00a0class","text":"<p>In this example, we are getting all the elements from the model that are instance of the class ViewSheet (Sheets in the model)</p> <pre><code># The variable doc is already instantiated in Revit Python Shell\nelements = FilteredElementCollector(doc).OfClass(ViewSheet).WhereElementIsNotElementType()\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#all-type-elements-of-a-specific-category","title":"All type elements of a specific\u00a0category","text":"<p>In this example, we are getting all the type elements of category \"Floors\"</p> <pre><code># The variable doc is already instantiated in Revit Python Shell\nelements = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsElementType()\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#combining-methods-in-filteredelementcollector","title":"Combining methods in FilteredElementCollector","text":"<p>Let's get all the elements of category floors from the current view. We can combine method inside the same </p> <pre><code>FilteredElementCollector instance.\n# The variable doc is already instantiated in Revit Python Shell\nactive_view = doc.ActiveView\nelements = FilteredElementCollector(doc, active_view.Id).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType()\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#elements-from-linked-models","title":"Elements from linked\u00a0models","text":"<p>The procedure is the same, the only difference is we have to use the \"Document\" from the linked model, for example:</p> <pre><code># __revit__ is a instance of Autodesk.Revit.UI.UIApplication\nfor linked_doc in __revit__.Application.Documents:\nif linked_doc.IsLinked:\nelements = FilteredElementCollector(linked_doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType()\nfor element in elements:\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#graphical-selection","title":"Graphical Selection","text":""},{"location":"revit/select_elements/#selected-elements-in-model","title":"Selected elements in\u00a0model","text":"<pre><code># The variables uidoc and doc already instantiated in Revit Python Shell\n# Getting ids from selected objects\nelement_ids = uidoc.Selection.GetElementIds()\nfor id in element_ids:\n# Getting element from id \nelement = doc.GetElement(id)\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#pick-elements-by-rectangle","title":"Pick elements by rectangle","text":"<pre><code># The variable uidoc is already instantiated in Revit Python Shell\n# You can specify any prompt message\nelements = uidoc.Selection.PickElementsByRectangle(\"Select elements\")\nfor element in elements:\nprint(element.Name)\n</code></pre>"},{"location":"revit/select_elements/#pick-elements-by-rectangle-and-a-filter","title":"Pick elements by rectangle and a\u00a0filter","text":"<pre><code>from Autodesk.Revit.UI.Selection import ISelectionFilter\n# Custom filter that takes a category name and filter the elements\n# Alternatively you can create any type of filter\nclass CategoryISelectionFilter(ISelectionFilter):\ndef __init__(self, category_name):\nself.category_name = category_name\ndef AllowElement(self, e):\nif e.Category.Name == self.category_name:\nreturn True\nelse:\nreturn False\ndef AllowReference(self, ref, point):\nreturn False\n# Instantiating the filter to allow only floors\n# Alternatively you can instantiate it with other categories\nfloors_filter = CategoryISelectionFilter(\"Floors\")\nelements = uidoc.Selection.PickElementsByRectangle(floors_filter, \"Select floors\")\nfor element in elements:\nprint(element.Name)\n</code></pre>"}]}